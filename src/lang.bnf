// === [ Lexical part] =========================================================

terminator : ';' '\n' | ';' | '\n' ;

// --- [ Keywords ] ------------------------------------------------------------
kwdBreak    : 'b' 'r' 'e' 'a' 'k' ;
kwdCase     : 'c' 'a' 's' 'e' ;
kwdConst    : 'c' 'o' 'n' 's' 't' ;
kwdContinue : 'c' 'o' 'n' 't' 'i' 'n' 'u' 'e' ;
kwdDefault  : 'd' 'e' 'f' 'a' 'u' 'l' 't' ;
kwdElse     : 'e' 'l' 's' 'e' ;
kwdFunc     : 'f' 'u' 'n' 'c' ;
kwdFor      : 'f' 'o' 'r' ;
kwdGoto     : 'g' 'o' 't' 'o' ;
kwdIf       : 'i' 'f' ;
kwdImport   : 'i' 'm' 'p' 'o' 'r' 't' ;
kwdPackage  : 'p' 'a' 'c' 'k' 'a' 'g' 'e' ;
kwdRange    : 'r' 'a' 'n' 'g' 'e' ;
kwdRet      : 'r' 'e' 't' 'u' 'r' 'n' ;
kwdStruct   : 's' 't' 'r' 'u' 'c' 't' ;
kwdSwitch   : 's' 'w' 'i' 't' 'c' 'h' ;
kwdType     : 't' 'y' 'p' 'e' ;
kwdVar      : 'v' 'a' 'r' ;

// --- [ Types ] ---------------------------------------------------------------
type
        : 'b' 'o' 'o' 'l'
        | 'i' 'n' 't'
        | 'f' 'l' 'o' 'a' 't' '3' '2'
        | 'f' 'l' 'o' 'a' 't' '6' '4'
        | 'b' 'y' 't' 'e'
        | 's' 't' 'r' 'i' 'n' 'g'
        ;

// --- [ Predeclared constants ] -----------------------------------------------
boolLit : 't' 'r' 'u' 'e' | 'f' 'a' 'l' 's' 'e' ;

// --- [ Operators ] -----------------------------------------------------------
_relOp      : '=' '=' | '!' '=' | '<' | '<' '=' | '>' | '>' '=' ;
_addOp      : '+' | '-' | '|' | '^' ;
_mulOp      : '*' | '/' | '%' | '<' '<' | '>' '>' | '&' | '&' '^' ;
assignOp    : [ _addOp | _mulOp ] '=' ;
shortAssign : ':' '=' ;

// --- [ Whitespaces (suppressed) ] --------------------------------------------
!whitespace : ' ' | '\t' | '\r' ;

// --- [ Comments (suppressed) ] -----------------------------------------------
!comment      : _lineComment | _blockComment ;
_lineComment  : '/' '/' { . } '\n' ;
_blockComment : '/' '*' { . | '*' } '*' '/' ;

// --- [ Letters and digits ] --------------------------------------------------
_letter        : _unicodeLetter | '_' ;
_unicodeLetter : 'a' - 'z' | 'A' - 'Z' ;
_decimalDigit  : '0' - '9' ;
_octalDigit    : '0' - '7' ;
_hexDigit      : _decimalDigit | 'a' - 'f' | 'A' - 'F' ;

// --- [ Identifiers ] ---------------------------------------------------------
// TODO: Check this
// blankIdent : '_' ;
identifier : _letter { _letter | _decimalDigit } ;

// --- [ Integer literals ] ----------------------------------------------------
intLit      : _decimalLit | _octalLit | _hexLit ;
_decimalLit : '1' - '9' { _decimalDigit } ;
_octalLit   : '0' { _octalDigit } ;
_hexLit     : '0' ( 'x' | 'X' ) _hexDigit { _hexDigit } ;

// --- [ Floating-point literals ] ---------------------------------------------
floatLit  : _decimals '.' [ _decimals ] [ _exponent ]
          | _decimals _exponent
          | '.' _decimals [ _exponent ]
          ;
_decimals : _decimalDigit { _decimalDigit } ;
_exponent : ( 'e' | 'E' ) [ '+' | '-' ] _decimals ;

// --- [ String literals ] -----------------------------------------------------
stringLit          :  _rawStrLit | _interpretedStrLit ;
_rawStrLit         : '`' { . } '`' ;
_interpretedStrLit : '"' { . | '\\' '"' | _escapeChar } '"' ;

// --- [ Single-character escapes ] --------------------------------------------
_escapeChar : '\\' 'n' | '\\' 'r' | '\\' 't' ;

// --- [ Rune literals ] -------------------------------------------------------
runeLit  : '\'' [ '\\' ] [ . ] '\'' ;

// === [ Syntax part] ==========================================================

<<
import (
        "fmt"

        "github.com/shivansh/gogo/src/ast"
        "github.com/shivansh/gogo/src/tac"
        "github.com/shivansh/gogo/goccgen/token"
)
>>

// NOTE
//      - https://github.com/goccmack/gocc/issues/5998
//      - Before each production rule, the corresponding rules from the go
//        language specification are written in comments.

Start
        : SourceFile  << ast.PrintIR($0.(*ast.Node)) >>
        ;

// SourceFile : PackageClause terminator RepeatTerminator RepeatImportDecl RepeatTopLevelDecl
SourceFile
        : RepeatTopLevelDecl  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

// --- [ Top level declarations ] ----------------------------------------------

// TODO: MethodDecl is not supported at the moment.
// TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
RepeatTopLevelDecl
        : TopLevelDecl RepeatTopLevelDecl  << ast.NewTopLevelDecl($0.(*ast.Node), $1.(*ast.Node)) >>
        | empty                            << ast.InitNode("", []string{}) >>
        ;

TopLevelDecl
        : Declaration RepeatTerminator   << ast.InitNode("", $0.(*ast.Node).Code) >>
        | FunctionDecl RepeatTerminator  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

// Declaration = ConstDecl | TypeDecl | VarDecl .
Declaration
        : ConstDecl  << ast.InitNode("", $0.(*ast.Node).Code) >>
        | TypeDecl   << ast.InitNode("", $0.(*ast.Node).Code) >>
        | VarDecl    << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

// --- [ Variable declarations ] -----------------------------------------------

// VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
// VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
VarDecl
        : kwdVar VarSpec  << ast.InitNode("", $1.(*ast.Node).Code) >>
        ;

VarSpec
        : IdentifierList Type                     << ast.NewVarSpec(0, $0.(*ast.Node), $1.(*ast.Node)) >>
        | IdentifierList Type "=" ExpressionList  << ast.NewVarSpec(1, $0.(*ast.Node), $1.(*ast.Node), $3.(*ast.Node)) >>
        | IdentifierList "=" ExpressionList       << ast.NewVarSpec(2, $0.(*ast.Node), $2.(*ast.Node)) >>
        | empty                                   << ast.NewVarSpec(3) >>
        ;

// --- [ Type declarations ] ---------------------------------------------------

// TypeDecl  = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
// TypeSpec  = AliasDecl | TypeDef .
// AliasDecl = identifier "=" Type
// TypeDef   = identifier Type
TypeDecl
        : kwdType TypeSpec   << ast.NewTypeDecl($1.(*ast.Node)) >>
        ;

TypeSpec
        : TypeDef  << ast.NewNode($0.(*ast.Node)) >>
        ;

TypeDef
        : identifier Type  << ast.NewTypeDef(string($0.(*token.Token).Lit), $1.(*ast.Node)) >>
        ;

// --- [ Constant declarations ] -----------------------------------------------

// ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
// ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
// IdentifierList = identifier { "," identifier } .
// ExpressionList = Expression { "," Expression } .
ConstDecl
        : kwdConst ConstSpec  << ast.InitNode("", $1.(*ast.Node).Code) >>
        ;

ConstSpec
        : IdentifierList                     << ast.NewConstSpec(0, $0.(*ast.Node)) >>
        | IdentifierList "=" ExpressionList  << ast.NewConstSpec(1, $0.(*ast.Node), $2.(*ast.Node)) >>
        ;

// --- [ Expressions ] ---------------------------------------------------------

ExpressionList
        : Expression                     << ast.NewNode($0.(*ast.Node)) >>
        | Expression "," ExpressionList  << ast.AppendExpr($0.(*ast.Node), $2.(*ast.Node)) >>
        ;

// Expression = UnaryExpr | Expression binary_op Expression .
// NOTE: The original BNF corresponding to Expression is modified to take into
// account operator precedence. The operators used are in the order of
// increasing precedence starting from top.
Expression
        : Expression "||" Term1  << ast.NewBoolExpr(string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term1                  << ast.NewNode($0.(*ast.Node)) >>
        ;

Term1
        : Term1 "&&" Term2  << ast.NewBoolExpr(string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term2             << ast.NewNode($0.(*ast.Node)) >>
        ;

Term2
        : Term2 RelOp Term3  << ast.NewRelExpr($1.(*ast.Node), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term3              << ast.NewNode($0.(*ast.Node)) >>
        ;

Term3
        : Term3 "+" Term4  << ast.NewArithExpr(string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term4            << ast.NewNode($0.(*ast.Node)) >>
        ;

Term4
        : Term4 "-" Term5  << ast.NewArithExpr(string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term5            << ast.NewNode($0.(*ast.Node)) >>
        ;

Term5
        : Term5 "*" Term6  << ast.NewArithExpr(string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term6            << ast.NewNode($0.(*ast.Node)) >>
        ;

Term6
        : Term6 "/" Term7  << ast.NewArithExpr(string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term7            << ast.NewNode($0.(*ast.Node)) >>
        ;

Term7
        : Term7 "%" Term8  << ast.NewArithExpr(string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | Term8            << ast.NewNode($0.(*ast.Node)) >>
        ;

Term8
        : "(" Expression ")"  << ast.NewNode($1.(*ast.Node)) >>
        | UnaryExpr           << ast.NewNode($0.(*ast.Node)) >>
        ;

// TODO: Add support for booleans in IR.
BinaryOp
        : RelOp  << ast.InitNode($0.(*ast.Node).Place, []string{}) >>
        | "||"   << ast.InitNode("or", []string{}) >>
        | "&&"   << ast.InitNode("and", []string{}) >>
        ;

// unaryOp will be used for defining UnaryExpr in parser.
// unaryOp     : '+' | '-' | '!' | '^' | '*' | '&' | '<' '-' ;
// binaryOp    : '|' '|' | '&' '&' | _relOp | _addOp | _mulOp ;
RelOp
        : "=="  << ast.InitNode("==", []string{}) >>
        | "!="  << ast.InitNode("!=", []string{}) >>
        | "<="  << ast.InitNode("<=", []string{}) >>
        | "<"   << ast.InitNode("<", []string{}) >>
        | ">="  << ast.InitNode(">=", []string{}) >>
        | ">"   << ast.InitNode(">", []string{}) >>
        ;

// UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .
UnaryExpr
        : PrimaryExpr        << ast.NewNode($0.(*ast.Node)) >>
        | UnaryOp UnaryExpr  << ast.NewUnaryExpr($0.(*ast.Node), $1.(*ast.Node)) >>
        ;

UnaryOp
        : "+"  << ast.InitNode("+", []string{}) >>
        | "-"  << ast.InitNode("-", []string{}) >>
        | "!"  << ast.InitNode("!", []string{}) >>
        | "*"  << ast.InitNode("*", []string{}) >>
        | "&"  << ast.InitNode("&", []string{}) >>
        ;

// PrimaryExpr =
//  Operand |
//  Conversion |
//  MethodExpr |
//  PrimaryExpr Selector |
//  PrimaryExpr Index |
//  PrimaryExpr Slice |
//  PrimaryExpr TypeAssertion |
//  PrimaryExpr Arguments .
PrimaryExpr
        : Operand  << ast.NewNode($0.(*ast.Node)) >>
        | PrimaryExpr Selector   << ast.NewPrimaryExprSel($0.(*ast.Node), $1.(*ast.Node)) >>
        | PrimaryExpr Index      << ast.NewPrimaryExprIndex($0.(*ast.Node), $1.(*ast.Node)) >>
        | PrimaryExpr Arguments  << ast.NewPrimaryExprArgs($0.(*ast.Node), $1.(*ast.Node)) >>
        ;

// Operand     = Literal | OperandName | "(" Expression ")" .
// Literal     = BasicLit | CompositeLit | FunctionLit .
// BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
// OperandName = identifier | QualifiedIdent.
Operand
        : Literal      << ast.NewNode($0.(*ast.Node)) >>
        | OperandName  << ast.InitNode($0.(*ast.Node).Place, []string{}) >>
        ;

Literal
        : BasicLit      << ast.InitNode($0.(*ast.Node).Place, []string{}) >>
        | CompositeLit  << ast.NewNode($0.(*ast.Node)) >>
        ;

BasicLit
        : intLit     << ast.InitNode(string($0.(*token.Token).Lit), []string{}) >>
        | stringLit  << ast.InitNode(fmt.Sprintf("string:%s", string($0.(*token.Token).Lit)), []string{}) >>
        ;

// CompositeLit  = LiteralType LiteralValue .
// LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
//                 SliceType | MapType | TypeName .
// LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
// ElementList   = KeyedElement { "," KeyedElement } .
// KeyedElement  = [ Key ":" ] Element .
// Key           = FieldName | Expression | LiteralValue .
// FieldName     = identifier .
// Element       = Expression | LiteralValue .
CompositeLit
        : LiteralType LiteralValue  << ast.NewCompositeLit($0.(*ast.Node), $1.(*ast.Node)) >>
        ;

LiteralType
        : ArrayType  << ast.InitNode($0.(*ast.Node).Place, []string{}) >>
        // When initializing structs, TypeName will be used as the name of struct.
        | TypeName   << ast.NewNode($0.(*ast.Node)) >>
        ;

// TypeName  = identifier | QualifiedIdent .
// QualifiedIdent = PackageName "." identifier .
TypeName
        : identifier  << ast.InitNode(string($0.(*token.Token).Lit), []string{}) >>
        ;

LiteralValue
        : "{" RepeatTerminator "}"  << ast.InitNode("", []string{}) >>
        // NOTE: We don't support adding a ',' after the last KeyedElement
        // as opposed to the official go language.
        // TODO: Support for struct initialization.
        | "{" RepeatTerminator ElementList "}"  << ast.NewNode($2.(*ast.Node)) >>
        ;

ElementList
        : KeyedElement RepeatKeyedElement  << ast.NewElementList($0.(*ast.Node), $1.(*ast.Node)) >>
        ;

RepeatKeyedElement
        : "," RepeatTerminator KeyedElement RepeatKeyedElement
                            << ast.AppendKeyedElement($2.(*ast.Node), $3.(*ast.Node)) >>
        | RepeatTerminator  << ast.InitNode("", []string{}) >>
        ;

KeyedElement
        : Element  << ast.NewNode($0.(*ast.Node)) >>
        ;

Element
        : Expression  << ast.NewNode($0.(*ast.Node)) >>
        ;

OperandName
        : identifier  << ast.NewIdentifier(string($0.(*token.Token).Lit)) >>
        ;

// Selector       = "." identifier .
// Index          = "[" Expression "]" .
// Slice          = "[" [ Expression ] ":" [ Expression ] "]" |
//                  "[" [ Expression ] ":" Expression ":" Expression "]" .
// TypeAssertion  = "." "(" Type ")" .
// Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
// Conversion = Type "(" Expression [ "," ] ")"
Selector
        : "." identifier  << ast.InitNode(string($1.(*token.Token).Lit), []string{}) >>
        ;

Index
        : "[" Expression "]"  << ast.NewNode($1.(*ast.Node)) >>
        ;

// Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
// NOTE: Since compilation of local variables has not yet been done, only empty
// arguments are supported for the time being.
Arguments
        : "(" ")"                 << ast.InitNode("", []string{}) >>
        | "(" ExpressionList ")"  << ast.NewNode($1.(*ast.Node)) >>
        ;

// FunctionDecl = "func" FunctionName Signature [ FunctionBody ] .
// FunctionName = identifier .
// FunctionBody = Block .
// NOTE: To support recursion, we need to add function's symbol table entry before
// the production rule for block of its body is reached. This is to avoid errors
// of the form "funcion not declared". A marker is introduced for this purpose.
FunctionDecl
        : FunctionMarker FunctionBody  << ast.NewFuncDecl($0.(*ast.Node), $1.(*ast.Node)) >>
        ;

FunctionMarker
        : kwdFunc FunctionName Signature  << ast.NewFuncMarker($1.(*ast.Node), $2.(*ast.Node)) >>
        ;

// Signature      = Parameters [ Result ] .
// Result         = Parameters | Type .
// Parameters     = "(" [ ParameterList [ "," ] ] ")" .
// ParameterList  = ParameterDecl { "," ParameterDecl } .
// ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
Signature
        : Parameters         << ast.NewSignature(0, $0.(*ast.Node)) >>
        | Parameters Result  << ast.NewSignature(1, $0.(*ast.Node), $1.(*ast.Node)) >>
        ;

Result
        : Parameters  << ast.NewResult($0.(*ast.Node)) >>
        | Type        << ast.InitNode("1", []string{}) >>
        ;

// TODO - ignore terminator
//      - parameters cannot end in ','
Parameters
        : "(" RepeatTerminator ")"  << ast.InitNode("", []string{}) >>
        | "(" ParameterList ")"     << ast.InitNode("", $1.(*ast.Node).Code) >>
        ;

ParameterList
        : ParameterDecl RepeatParameterDecl  << ast.NewParamList($0.(*ast.Node), $1.(*ast.Node)) >>
        ;

RepeatParameterDecl
        : "," ParameterDecl RepeatParameterDecl  << ast.AppendParam($1.(*ast.Node), $2.(*ast.Node)) >>
        | empty                                  << ast.InitNode("", []string{}) >>
        ;

ParameterDecl
        : IdentifierList Type  << ast.InitNode("", $0.(*ast.Node).Code) >>
        | Type                 << ast.InitNode("", []string{fmt.Sprintf("int")}) >>
        ;

// Type      = TypeName | TypeLit | "(" Type ")" .
// TypeName  = identifier | QualifiedIdent .
// TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
//             SliceType | MapType | ChannelType .
Type
        : type  << ast.InitNode(string($0.(*token.Token).Lit), []string{}) >>
        | TypeLit  << ast.NewNode($0.(*ast.Node)) >>
        ;

TypeLit
        : StructType  << ast.InitNode("struct", $0.(*ast.Node).Code) >>
        ;

// ArrayType   = "[" ArrayLength "]" ElementType .
// ArrayLength = Expression .
// ElementType = Type .
// TODO: ElementType is taken to be only int for now.
ArrayType
        : "[" ArrayLength "]" ElementType
                << ast.NewArrayType($1.(*ast.Node).Place, string($3.(*ast.Node).Place)) >>
        ;

// NOTE: ArrayLength is modified to be only an integer, unlike in Go where it is
// an expression.
ArrayLength
        : intLit  << ast.InitNode(string($0.(*token.Token).Lit), []string{}) >>
        ;

ElementType
        : Type  << ast.InitNode($0.(*ast.Node).Place, []string{}) >>
        ;

// StructType    = kwdStruct "{" { FieldDecl ";" } "}" .
// FieldDecl     = (IdentifierList Type | EmbeddedField) [ Tag ] .
// EmbeddedField = [ "*" ] TypeName .
// Tag           = string_lit .
StructType
        : kwdStruct RepeatTerminator "{" RepeatTerminator RepeatFieldDecl "}"
                << ast.InitNode("", $4.(*ast.Node).Code) >>
        ;

RepeatFieldDecl
        : FieldDecl terminator RepeatTerminator RepeatFieldDecl
                                      << ast.AppendFieldDecl($0.(*ast.Node), $3.(*ast.Node)) >>
        | FieldDecl RepeatTerminator  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

FieldDecl
        : IdentifierList Type  << ast.NewFieldDecl($0.(*ast.Node), $1.(*ast.Node)) >>
        | empty                << ast.InitNode("", []string{}) >>
        ;

// IdentifierList = identifier { "," identifier } .
IdentifierList
        : identifier                     << ast.InitNode("", []string{string($0.(*token.Token).Lit)}) >>
        | identifier "," IdentifierList  << ast.AppendIdent(string($0.(*token.Token).Lit), $2.(*ast.Node)) >>
        ;

// The symbol table entry for a function is of the form -
//      functionName : ["func", (rest of the values are yet to be decided)]
FunctionName
        : identifier  << ast.InitNode(string($0.(*token.Token).Lit), []string{}) >>
        ;

FunctionBody
        : Block  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

RepeatTerminator
        : terminator RepeatTerminator
        | empty
        ;

// --- [ Statements ] ----------------------------------------------------------

StatementList
        : Statement terminator RepeatTerminator StatementList
                                      << ast.NewStmtList($0.(*ast.Node), $3.(*ast.Node)) >>
        | Statement RepeatTerminator  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

// Statement = Declaration | LabeledStmt | SimpleStmt |
//             GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
//             FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
//             DeferStmt .
// NOTE: The following statements have been additionally introduced.
//      - PrintIntStmt
Statement
        : Declaration   << ast.InitNode("", $0.(*ast.Node).Code) >>
        | LabeledStmt   << ast.InitNode("", $0.(*ast.Node).Code) >>
        | SimpleStmt    << ast.InitNode("", $0.(*ast.Node).Code) >>
        | ReturnStmt    << ast.InitNode("", $0.(*ast.Node).Code) >>
        | BreakStmt     << ast.InitNode("", $0.(*ast.Node).Code) >>
        | ContinueStmt  << ast.InitNode("", $0.(*ast.Node).Code) >>
        | GotoStmt      << ast.InitNode("", $0.(*ast.Node).Code) >>
        | Block         << ast.InitNode("", $0.(*ast.Node).Code) >>
        | IfStmt        << ast.InitNode("", $0.(*ast.Node).Code) >>
        | SwitchStmt    << ast.InitNode("", $0.(*ast.Node).Code) >>
        | ForStmt       << ast.InitNode("", $0.(*ast.Node).Code) >>
        | DeferStmt     << ast.InitNode("", $0.(*ast.Node).Code) >>
        | PrintStmt     << ast.InitNode("", $0.(*ast.Node).Code) >>
        | ScanStmt      << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

// LabeledStmt = Label ":" Statement .
// Label       = identifier .
LabeledStmt
        : Label ":" RepeatTerminator Statement  << ast.NewLabelStmt($0.(*ast.Node), $3.(*ast.Node)) >>
        ;

// SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
// EmptyStmt = .
// ExpressionStmt = Expression .
// IncDecStmt = Expression ( "++" | "--" ) .
// Assignment = ExpressionList assign_op ExpressionList .
// assign_op = [ add_op | mul_op ] "=" .
// ShortVarDecl = IdentifierList ":=" ExpressionList .
SimpleStmt
        : EmptyStmt       << ast.InitNode("", []string{}) >>
        | Assignment      << ast.InitNode("", $0.(*ast.Node).Code) >>
        | ShortVarDecl    << ast.InitNode("", $0.(*ast.Node).Code) >>
        | IncDecStmt      << ast.InitNode("", $0.(*ast.Node).Code) >>
        | ExpressionStmt  << ast.NewNode($0.(*ast.Node)) >>
        ;

EmptyStmt : empty ;

ReturnStmt
        : kwdRet                 << ast.NewReturnStmt() >>
        | kwdRet ExpressionList  << ast.NewReturnStmt($1.(*ast.Node)) >>
        ;

// BreakStmt = "break" [ Label ] .
BreakStmt
        : kwdBreak        << ast.InitNode("", []string{"break"}) >>
        | kwdBreak Label  << ast.InitNode("", []string{fmt.Sprintf("%s, %s", tac.JMP, $1.(*ast.Node).Place)}) >>
        ;

// ContinueStmt = "continue" [ Label ] .
ContinueStmt
        : kwdContinue  << ast.InitNode("", []string{"continue"}) >>
        // TODO: `continue label` vs `break label` ??
        // | kwdContinue Label
        ;

// GotoStmt = "goto" Label .
GotoStmt
        : kwdGoto Label  << ast.InitNode("", []string{fmt.Sprintf("%s, %s", tac.JMP, $1.(*ast.Node).Place)}) >>
        ;

Block
        : "{" Marker RepeatTerminator StatementList "}"  << ast.NewBlock($3.(*ast.Node)) >>
        ;

// NOTE: Marker demarcates the beginning of a block and the corresponding symbol
// table is instantiated here.
Marker
        : empty  << ast.NewBlockMarker() >>
        ;

// IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
IfStmt
        : kwdIf Expression Block                        << ast.NewIfStmt(0, $1.(*ast.Node), $2.(*ast.Node)) >>
        | kwdIf Expression Block kwdElse Block          << ast.NewIfStmt(1, $1.(*ast.Node), $2.(*ast.Node), $4.(*ast.Node)) >>
        | kwdIf Expression Block kwdElse IfStmt         << ast.NewIfStmt(2, $1.(*ast.Node), $2.(*ast.Node), $4.(*ast.Node)) >>
        | kwdIf SimpleStmt terminator Expression Block  << ast.NewIfStmt(3, $1.(*ast.Node), $3.(*ast.Node), $4.(*ast.Node)) >>
        | kwdIf SimpleStmt terminator Expression Block kwdElse IfStmt
                                                        << ast.NewIfStmt(4, $1.(*ast.Node), $3.(*ast.Node), $4.(*ast.Node), $6.(*ast.Node)) >>
        | kwdIf SimpleStmt terminator Expression Block kwdElse Block
                                                        << ast.NewIfStmt(5, $1.(*ast.Node), $3.(*ast.Node), $4.(*ast.Node), $6.(*ast.Node)) >>
        ;

// SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
SwitchStmt
        : ExprSwitchStmt  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

// ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
// ExprCaseClause = ExprSwitchCase ":" StatementList .
// ExprSwitchCase = "case" ExpressionList | "default" .
ExprSwitchStmt
        : kwdSwitch Expression "{" RepeatTerminator RepeatExprCaseClause "}"
                << ast.NewSwitchStmt($1.(*ast.Node), $4.(*ast.Node)) >>
        ;

RepeatExprCaseClause
        : ExprCaseClause RepeatExprCaseClause  << ast.AppendExprCaseClause($0.(*ast.Node), $1.(*ast.Node)) >>
        | empty                                << ast.InitNode("", []string{}) >>
        ;

// ExprCaseClause = ExprSwitchCase ":" StatementList .
// ExprSwitchCase = "case" ExpressionList | "default" .
ExprCaseClause
        : ExprSwitchCase ":" RepeatTerminator StatementList
                << ast.NewExprCaseClause($0.(*ast.Node), $3.(*ast.Node)) >>
        ;

// NOTE: The grammar is modified to support only a single expression in a
// switch statement.
// ExprSwitchCase : kwdCase ExpressionList
ExprSwitchCase
        : kwdCase Expression  << ast.NewNode($1.(*ast.Node)) >>
        | kwdDefault          << ast.InitNode("default", []string{}) >>
        ;

// ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
// Condition = Expression .
ForStmt
        : kwdFor Block            << ast.NewForStmt(0, $1.(*ast.Node)) >>
        | kwdFor Condition Block  << ast.NewForStmt(1, $1.(*ast.Node), $2.(*ast.Node)) >>
        | kwdFor ForClause Block  << ast.NewForStmt(2, $1.(*ast.Node), $2.(*ast.Node)) >>
        ;

// ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
// InitStmt = SimpleStmt .
// PostStmt = SimpleStmt .
// NOTE: The place value of ForClause contains the place value of the condition
// statement as that will be required in ForStmt to determine when to break. The
// place values of InitStmt and PostStmt will not be required.
// The code value of ForClause contains newline separated codes of InitStmt,
// Condition and PostStmt.
// When Condition is not specified, do an endless loop by initializing the place
// value to 1.
ForClause
        : terminator terminator                     << ast.InitNode("1", []string{"", "", ""}) >>
        | InitStmt terminator terminator            << ast.NewForClause(0, $0.(*ast.Node)) >>
        | terminator Condition terminator           << ast.NewForClause(1, $1.(*ast.Node)) >>
        | terminator terminator PostStmt            << ast.NewForClause(2, $2.(*ast.Node)) >>
        | InitStmt terminator Condition terminator  << ast.NewForClause(3, $0.(*ast.Node), $2.(*ast.Node)) >>
        | InitStmt terminator terminator PostStmt   << ast.NewForClause(4, $0.(*ast.Node), $3.(*ast.Node)) >>
        | terminator Condition terminator PostStmt  << ast.NewForClause(5, $1.(*ast.Node), $3.(*ast.Node)) >>
        | InitStmt terminator Condition terminator PostStmt
                                                    << ast.NewForClause(6, $0.(*ast.Node), $2.(*ast.Node), $4.(*ast.Node)) >>
        ;

InitStmt
        : SimpleStmt  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

PostStmt
        : SimpleStmt  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

// FIXME: Condition can only be a binary expression.
Condition
        : Expression  << ast.NewNode($0.(*ast.Node)) >>
        ;

// DeferStmt = "defer" Expression .
// NOTE: Currently defer only handles function calls and not method calls.
DeferStmt
        : "defer" PrimaryExpr Arguments  << ast.NewDeferStmt($1.(*ast.Node), $2.(*ast.Node)) >>
        ;

PrintStmt
        : PrintIntStmt  << ast.InitNode("", $0.(*ast.Node).Code) >>
        | PrintStrStmt  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

ScanStmt
        : ScanIntStmt  << ast.InitNode("", $0.(*ast.Node).Code) >>
        ;

PrintIntStmt
        : "printInt" Expression  << ast.NewIOStmt(string($0.(*token.Token).Lit), $1.(*ast.Node)) >>
        ;

PrintStrStmt
        : "printStr" Expression  << ast.NewIOStmt(string($0.(*token.Token).Lit), $1.(*ast.Node)) >>
        ;

ScanIntStmt
        : "scanInt" Expression  << ast.NewIOStmt(string($0.(*token.Token).Lit), $1.(*ast.Node)) >>
        ;

ExpressionStmt
        : Expression  << ast.NewNode($0.(*ast.Node)) >>
        ;

IncDecStmt
        : Expression "++"  << ast.NewIncDecStmt(string($1.(*token.Token).Lit), $0.(*ast.Node)) >>
        | Expression "--"  << ast.NewIncDecStmt(string($1.(*token.Token).Lit), $0.(*ast.Node)) >>
        ;

Assignment
        : ExpressionList assignOp ExpressionList  << ast.NewAssignStmt(0, string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | ExpressionList "=" ExpressionList       << ast.NewAssignStmt(1, string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        | IdentifierList "=" ExpressionList       << ast.NewAssignStmt(2, string($1.(*token.Token).Lit), $0.(*ast.Node), $2.(*ast.Node)) >>
        ;

ShortVarDecl
        : IdentifierList shortAssign ExpressionList  << ast.NewShortDecl($0.(*ast.Node), $2.(*ast.Node)) >>
        ;

Label
        : identifier  << ast.InitNode(string($0.(*token.Token).Lit), []string{}) >>
        ;
